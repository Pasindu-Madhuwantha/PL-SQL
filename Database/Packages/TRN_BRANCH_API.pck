create or replace package TRN_BRANCH_API is

function GET_BRANCH_NAME(BRANCH_ID_ IN VARCHAR2) RETURN VARCHAR2;
function GET_BRANCH_MANAGER(BRANCH_ID_ IN VARCHAR2) RETURN VARCHAR2;
function GET_BRANCH_ADDRESS(BRANCH_ID_ IN VARCHAR2) RETURN VARCHAR2;
function GET_BRANCH_CAPACITY(BRANCH_ID_ IN VARCHAR2) RETURN INT;

 PROCEDURE NEW_RECORD(BRANCH_ID_        IN VARCHAR2,
                       BRANCH_NAME_      IN VARCHAR2,
                       ADDRESS_DETAILS_  IN VARCHAR2,
                       BRANCH_MANAGER_   IN VARCHAR2,
                       TOTAL_CAPACITY_   IN INT,
                       COMPANY_ID_       IN VARCHAR2);
                       
 
  PROCEDURE UPDATE_RECORD(BRANCH_ID_        IN VARCHAR2,
                          BRANCH_NAME_      IN VARCHAR2,
                          ADDRESS_DETAILS_  IN VARCHAR2,
                          BRANCH_MANAGER_   IN VARCHAR2,
                          TOTAL_CAPACITY_   IN INT,
                          COMPANY_ID_       IN VARCHAR2);
                          
  PROCEDURE DELETE_RECORD(BRANCH_ID_ IN VARCHAR2);
end TRN_BRANCH_API;
/
create or replace package body TRN_BRANCH_API is

 function GET_BRANCH_NAME(BRANCH_ID_ IN VARCHAR2) RETURN VARCHAR2 IS
 result VARCHAR2(100);
 
 CURSOR GET_BRANCH_NAME IS
 SELECT BRANCHNAME FROM TRN_BRANCH_TAB WHERE BRANCHID = BRANCH_ID_;
 BEGIN
      OPEN GET_BRANCH_NAME;
      FETCH GET_BRANCH_NAME INTO result;
      CLOSE GET_BRANCH_NAME;
      
      RETURN result;
 END GET_BRANCH_NAME;
 
  function GET_BRANCH_MANAGER(BRANCH_ID_ IN VARCHAR2) RETURN VARCHAR2 IS
 result VARCHAR2(100);
 
 CURSOR GET_BRANCH_MANAGER IS
 SELECT BRANCHMANAGER FROM TRN_BRANCH_TAB WHERE BRANCHID = BRANCH_ID_;
 BEGIN
      OPEN GET_BRANCH_MANAGER;
      FETCH GET_BRANCH_MANAGER INTO result;
      CLOSE GET_BRANCH_MANAGER;
      
      RETURN result;
 END GET_BRANCH_MANAGER;
 
 
    function GET_BRANCH_ADDRESS(BRANCH_ID_ IN VARCHAR2) RETURN VARCHAR2 IS
 result VARCHAR2(100);
 
 CURSOR GET_BRANCH_ADDRESS IS
 SELECT ADDRESSDETAILS FROM TRN_BRANCH_TAB WHERE BRANCHID = BRANCH_ID_;
 BEGIN
      OPEN GET_BRANCH_ADDRESS;
      FETCH GET_BRANCH_ADDRESS INTO result;
      CLOSE GET_BRANCH_ADDRESS;
      
      RETURN result;
 END GET_BRANCH_ADDRESS;
 
 
  function GET_BRANCH_CAPACITY(BRANCH_ID_ IN VARCHAR2) RETURN INT IS
 result INT;
 
 CURSOR GET_BRANCH_CAPACITY IS
 SELECT TOTALCAPACITY FROM TRN_BRANCH_TAB WHERE BRANCHID = BRANCH_ID_;
 BEGIN
      OPEN GET_BRANCH_CAPACITY;
      FETCH GET_BRANCH_CAPACITY INTO result;
      CLOSE GET_BRANCH_CAPACITY;
      
      RETURN result;
 END GET_BRANCH_CAPACITY;
 
  PROCEDURE NEW_RECORD(BRANCH_ID_        IN VARCHAR2,
                       BRANCH_NAME_      IN VARCHAR2,
                       ADDRESS_DETAILS_  IN VARCHAR2,
                       BRANCH_MANAGER_   IN VARCHAR2,
                       TOTAL_CAPACITY_   IN INT,
                       COMPANY_ID_       IN VARCHAR2) IS
  BEGIN
     INSERT INTO TRN_BRANCH_TAB
        (BRANCHID,BRANCHNAME,ADDRESSDETAILS,BRANCHMANAGER,TOTALCAPACITY,COMPANYID)
     VALUES
         (BRANCH_ID_,BRANCH_NAME_,ADDRESS_DETAILS_,BRANCH_MANAGER_,TOTAL_CAPACITY_,COMPANY_ID_);
  END NEW_RECORD;
  
  
  PROCEDURE UPDATE_RECORD(BRANCH_ID_        IN VARCHAR2,
                          BRANCH_NAME_      IN VARCHAR2,
                          ADDRESS_DETAILS_  IN VARCHAR2,
                          BRANCH_MANAGER_   IN VARCHAR2,
                          TOTAL_CAPACITY_   IN INT,
                          COMPANY_ID_       IN VARCHAR2) IS
  BEGIN
     UPDATE TRN_BRANCH_TAB
     
     SET BRANCHID = BRANCH_ID_,
         BRANCHNAME = BRANCH_NAME_,
         ADDRESSDETAILS = ADDRESS_DETAILS_,
         BRANCHMANAGER = BRANCH_MANAGER_,
         TOTALCAPACITY = TOTAL_CAPACITY_,
         COMPANYID = COMPANY_ID_
     
     WHERE BRANCHID = BRANCH_ID_;
     
         
  END UPDATE_RECORD;
  
  PROCEDURE DELETE_RECORD(BRANCH_ID_ IN VARCHAR2) IS
  BEGIN
      DELETE TRN_BRANCH_TAB
      WHERE BRANCHID = BRANCH_ID_;
  END DELETE_RECORD;
      


  
 
 
end TRN_BRANCH_API;
/
